generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sales     Sale[]
}

model Supplier {
  id        String   @id @default(uuid())
  name      String
  rfc       String   @unique
  bank      String
  account   String
  credit    Float    @default(0)
  lots      Lot[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Customer {
  id            String   @id @default(uuid())
  name          String
  kind          String
  creditLimit   Float    @default(0)
  sales         Sale[]
  receivables   Receivable[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Product {
  id           String   @id @default(uuid())
  name         String
  category     String
  unit         String
  purchasePrice Float
  salePrice    Float
  stock        Float    @default(0)
  lotId        String?
  lot          Lot?     @relation(fields: [lotId], references: [id])
  saleItems    SaleItem[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Lot {
  id           String   @id @default(uuid())
  productId    String
  supplierId   String
  weight       Float
  entryDate    DateTime
  status       String
  product      Product  @relation(fields: [productId], references: [id])
  supplier     Supplier @relation(fields: [supplierId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Sale {
  id          String      @id @default(uuid())
  userId      String?
  customerId  String?
  total       Float
  paid        Float    @default(0)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  customer    Customer? @relation(fields: [customerId], references: [id])
  user        User?      @relation(fields: [userId], references: [id])
  items       SaleItem[]
  receivable  Receivable?
}

model SaleItem {
  id        String  @id @default(uuid())
  saleId    String
  productId String
  quantity  Float
  price     Float
  sale      Sale    @relation(fields: [saleId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Receivable {
  id        String   @id @default(uuid())
  saleId    String   @unique
  customerId String
  balance   Float
  paid      Float    @default(0)
  dueDate   DateTime
  sale      Sale     @relation(fields: [saleId], references: [id])
  customer  Customer @relation(fields: [customerId], references: [id])
  payments  Payment[]
}

model Payment {
  id            String      @id @default(uuid())
  receivableId  String
  amount        Float
  createdAt     DateTime @default(now())
  receivable    Receivable @relation(fields: [receivableId], references: [id])
}

model Expense {
  id          String   @id @default(uuid())
  concept     String
  amount      Float
  attachmentUrl String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Report {
  id        String   @id @default(uuid())
  name      String
  payload   Json
  createdAt DateTime @default(now())
}
